syntax = "proto3";

package yandex.cloud.priv.quota;

import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/quota;quota";
option java_outer_classname = "PQ";

// Cloud service should implement grpc service with signature
//
//service QuotaService {
//  rpc Get (quota.GetQuotaRequest) returns (quota.Quota);
//
//  rpc BatchUpdateMetric (quota.BatchUpdateQuotaMetricsRequest) returns (google.protobuf.Empty);
//}

message Quota {
  string cloud_id = 1;
  repeated QuotaMetric metrics = 2;
}

message QuotaMetric {
  string name = 1; // formatted as <domain>.<metric>.<unit>, e.g. mdb.hdd.size
  int64 value = 2 [deprecated=true]; // use 'usage' field instead
  int64 limit = 3;
  double usage = 4;
}

message MetricLimit {
  string name = 1;
  int64 limit = 2;
}

message GetQuotaRequest {
  string cloud_id = 1 [(required) = true, (length) = "<=50"];
}

message UpdateQuotaMetricRequest {
  string cloud_id = 1 [(required) = true, (length) = "<=50"];
  MetricLimit metric = 2;
}

message BatchUpdateQuotaMetricsRequest {
  string cloud_id = 1 [(required) = true, (length) = "<=50"];
  repeated MetricLimit metrics = 2;
}

message GetQuotaDefaultRequest {
}

message GetQuotaDefaultResponse {
  repeated MetricLimit metrics = 1;
}

message QuotaFailure {
  message Violation {
    QuotaMetric metric = 1;
    int64 required = 2; // new value for the MetricLimit.limit, so it is: old limit + delta
  }
  string cloud_id = 1;
  repeated Violation violations = 2;
}
