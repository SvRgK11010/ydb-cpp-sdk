syntax = "proto3";

package yandex.cloud.priv.iam.v1.mfa.hardware;

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/sensitive.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/iam/v1/mfa/hardware/totp_profile.proto";
import "yandex/cloud/priv/iam/v1/mfa/totp_profile.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/mfa/hardware;mfa_hardware";
option java_outer_classname = "PHTPS";

// A set of methods for managing hardware time-based one time passwords (TOTP).
// The user credentials should be passed in the authorization header.
service TotpProfileService {

  // Creates hardware TOTP profile
  rpc Create (CreateTotpProfileRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateTotpProfileMetadata"
      response: "TotpProfile"
    };
  }

  // Bulk creates hardware TOTP profiles using file .csv
  rpc ImportFromFile (ImportTotpProfilesRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "ImportTotpProfilesMetadata"
      response: "ImportTotpProfilesResponse"
    };
  }

  // Retrieves hardware TOTP profile by Id
  rpc Get (GetTotpProfileRequest) returns (TotpProfile) {}

  // Retrieves the list hardware TOTP profiles by organization_id and filter
  rpc List (ListTotpProfilesRequest) returns (ListTotpProfilesResponse) {}

  // Updates hardware TOTP profile
  rpc Update (UpdateTotpProfileRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateTotpProfileMetadata"
      response: "TotpProfile"
    };
  }

  // Updates hardware TOTP profile by id
  rpc Delete (DeleteTotpProfileRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteTotpProfileMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Retrieves the list of Operations for the specified hardware TOTP profile.
  rpc ListOperations (ListTotpProfileOperationsRequest) returns (ListTotpProfileOperationsResponse) {}

  // Binds the token to the user for HelpDesk
  rpc Assign (AssignTotpProfileRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "AssignTotpProfileMetadata"
      response: "TotpProfile"
    };
  }

  // Unbind the token from the user for HelpDesk
  rpc Unassign (UnassignTotpProfileRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UnassignTotpProfileMetadata"
      response: "TotpProfile"
    };
  }

  // Synchronizes clocks for hardware tokens. Doesn't activate profile.
  rpc SyncTimeDrift (SyncTimeDriftRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "SyncTimeDriftMetadata"
      response: "TotpProfile"
    };
  }

  // Verifies user-supplied TOTP value. See https://tools.ietf.org/html/rfc6238#section-5.2 for the reference.
  rpc Verify (VerifyTotpRequest) returns (VerifyTotpResponse) {}
}

message CreateTotpProfileRequest {

  // The organization in which the hardware token is registered
  string organization_id = 1 [(required) = true, (length) = "<=50"];

  // An optional subject_id to auto-assign
  string subject_id = 2 [(length) = "<=50"];

  // Optional description
  string description = 3 [(length) = "<=256"];

  // Optional labels
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Algorithm used to calculate the hash (SHA1, SHA256 or SHA512). Default is SHA1.
  HashAlgorithm algorithm = 5;

  // Length of the TOTP code (6, 7 or 8). Default is 6.
  int64 digits = 6 [(value) = "0,6,7,8"];

  // The period that a TOTP code will be valid for.
  google.protobuf.Duration time_step = 7 [(value) = "10s-10m"];

  // secret encoded in HEX
  string secret = 8 [(required) = true, (sensitive) = true, (length) = "<=262144"];

  // Serial number hardware token
  string serial_no = 9 [(required) = true, (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Manufacturer hardware token
  string manufacturer = 10 [(length) = "<=256"];

  // Model hardware token
  string model = 11 [(length) = "<=256"];

  // Start time for the hardware token. Default is Unix Epoch.
  google.protobuf.Timestamp start_time = 12;

  // Token time lags
  google.protobuf.Duration time_drift = 13;
}

message CreateTotpProfileMetadata {
  string totp_profile_id = 1;
}

message ImportTotpProfilesRequest {
  // Data from file csv, secret encoded in HEX
  string data = 1 [(required) = true, (length) = "<=262144", (sensitive) = true];
  HashAlgorithm algorithm = 2;
  int64 digits = 3 [(value) = "0,6,7,8"];
  google.protobuf.Duration time_step = 4 [(value) = "10s-10m"];
  string description = 5 [(length) = "<=256"];
  map<string, string> labels = 6 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  string manufacturer = 7 [(length) = "<=256"];
  string model = 8 [(length) = "<=256"];
}

message ImportTotpProfilesMetadata {
}

message ImportTotpProfilesResponse {
  repeated hardware.TotpProfile totp_profiles = 1;
}

message GetTotpProfileRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
}

message ListTotpProfilesRequest {
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  string filter = 2 [(length) = "<=1000"];
  int64 page_size = 3 [(value) = "0-1000"];
  string page_token = 4 [(length) = "<=100"];
}

message ListTotpProfilesResponse {
  repeated hardware.TotpProfile totp_profiles = 1;
  string next_page_token = 2;
}

message UpdateTotpProfileRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
  // Mask specifying which totp profile fields will be updated.
  google.protobuf.FieldMask update_mask = 2;
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

message UpdateTotpProfileMetadata {
  string totp_profile_id = 1;
}

message DeleteTotpProfileRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteTotpProfileMetadata {
  string totp_profile_id = 1;
}

message ListTotpProfileOperationsRequest {
  oneof from {
    option (exactly_one) = true;
    string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
    string organization_id = 2 [(required) = true, (length) = "<=50"];
  }
  int64 page_size = 3 [(value) = "0-1000"];
  string page_token = 4 [(length) = "<=100"];
}

message ListTotpProfileOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}

message AssignTotpProfileRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
  string subject_id = 2 [(required) = true, (length) = "<=50"];
}

message AssignTotpProfileMetadata {
  string totp_profile_id = 1;
}

message UnassignTotpProfileRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
}

message UnassignTotpProfileMetadata {
  string totp_profile_id = 1;
}

message SyncTimeDriftRequest {
  string totp_profile_id = 1 [(required) = true, (length) = "<=50"];
  repeated int64 code = 2 [(sensitive) = true, (sensitive_type) = SENSITIVE_REMOVE, (value) = ">0", (size) = ">1"];
  // Maximum number of steps time_step by which the time of the server and the token can differ. Default value is 25
  int64 window_size = 3 [(value) = "1-100"];
}

message SyncTimeDriftMetadata {
  string totp_profile_id = 1;
}

message VerifyTotpRequest {
  int64 code = 1 [(sensitive) = true, (sensitive_type) = SENSITIVE_REMOVE, (value) = ">0"];
  string totp_profile_id = 2 [(required) = true, (length) = "<=50"];
}

message VerifyTotpResponse {
  VerificationResult result = 1;
  google.protobuf.Timestamp retry_at = 2;
}
