syntax = "proto3";

package yandex.cloud.priv.iam.v1.backoffice;

import "google/rpc/status.proto";
import "yandex/cloud/priv/access/access.proto";
import "yandex/cloud/priv/servicecontrol/v1/access_service.proto";
import "yandex/cloud/priv/servicecontrol/v1/resource.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/backoffice;iam_backoffice";
option java_outer_classname = "PBOPS";

service PermissionService {
  rpc Check (CheckPermissionRequest) returns (CheckPermissionResponse);
}

message CheckPermissionRequest {
  // Permission to check.
  string permission = 1 [(required) = true, (length) = "<=50"];
  // Resource path from most specific resource to least.
  // Same semantics as AccessService.AuthorizeRequest#resource_path.
  repeated servicecontrol.v1.Resource resource_path = 2 [(size) = "<=50"];
  // Subject to check permission for. Use caller subject if not specified.
  servicecontrol.v1.Subject subject = 3;
}

message CheckPermissionResponse {
  // Permission info for resources in specified resource path, from most specific to least.
  // Might contain more entries than specified resource path.
  repeated ResourcePermissionInfo resource_permissions = 1;
}

message ResourcePermissionInfo {
  // Resource against which the permission is being checked.
  servicecontrol.v1.Resource resource = 1;

  // Access bindings on this resource that grant the permission.
  repeated access.AccessBinding access_bindings = 2;

  // AccessService response trying to authorize the permission against this resource.
  oneof authorize_response {
    option (exactly_one) = true;
    // If authorization succeeded.
    servicecontrol.v1.AuthorizeResponse response = 3;
    // If authorization failed.
    google.rpc.Status status = 4;
  }
}
